#!/usr/bin/env bash
#
# Quick Edit Selector using fzf with pywal colors and file info preview
# This script presents a menu of config files to edit with a preview pane

# Load pywal colors if available
COLORS_FILE="$HOME/.cache/wal/colors.json"
if [[ -f "$COLORS_FILE" ]]; then
    # Extract colors using jq
    BACKGROUND=$(jq -r '.special.background' "$COLORS_FILE" 2>/dev/null)
    FOREGROUND=$(jq -r '.special.foreground' "$COLORS_FILE" 2>/dev/null)
    COLOR1=$(jq -r '.colors.color1' "$COLORS_FILE" 2>/dev/null)
    COLOR2=$(jq -r '.colors.color2' "$COLORS_FILE" 2>/dev/null)
    COLOR3=$(jq -r '.colors.color3' "$COLORS_FILE" 2>/dev/null)
    COLOR4=$(jq -r '.colors.color4' "$COLORS_FILE" 2>/dev/null)
    COLOR5=$(jq -r '.colors.color5' "$COLORS_FILE" 2>/dev/null)
    COLOR6=$(jq -r '.colors.color6' "$COLORS_FILE" 2>/dev/null)
    COLOR7=$(jq -r '.colors.color7' "$COLORS_FILE" 2>/dev/null)
    COLOR8=$(jq -r '.colors.color8' "$COLORS_FILE" 2>/dev/null)
    COLOR10=$(jq -r '.colors.color10' "$COLORS_FILE" 2>/dev/null)
    COLOR13=$(jq -r '.colors.color13' "$COLORS_FILE" 2>/dev/null)
    COLOR14=$(jq -r '.colors.color14' "$COLORS_FILE" 2>/dev/null)
    
    # Convert hex colors to ANSI color codes for fzf
    FZF_COLORS="--color=bg:$BACKGROUND,fg:$FOREGROUND,header:$COLOR10,info:$COLOR7,pointer:$COLOR13,marker:$COLOR3,spinner:$COLOR3,hl:$COLOR13,hl+:$COLOR13,preview-bg:$BACKGROUND,preview-fg:$FOREGROUND"
else
    # Fallback colors if pywal isn't available
    FZF_COLORS="--color=bg:#1e1e2e,fg:#cdd6f4,header:#89b4fa,info:#a6adc8,pointer:#f38ba8,marker:#fab387,spinner:#fab387,hl:#f38ba8,hl+:#f38ba8,preview-bg:#1e1e2e,preview-fg:#cdd6f4"
    # Set fallback colors for preview script
    BACKGROUND="#1e1e2e"
    FOREGROUND="#cdd6f4"
    COLOR1="#f38ba8"
    COLOR2="#a6e3a1"
    COLOR3="#fab387"
    COLOR4="#89b4fa"
    COLOR5="#f5c2e7"
    COLOR6="#94e2d5"
    COLOR7="#a6adc8"
    COLOR8="#6c7086"
    COLOR10="#a6e3a1"
    COLOR13="#f5c2e7"
    COLOR14="#89dceb"
fi

# Function to create file if it doesn't exist
create_file_if_missing() {
    local file_path="$1"
    
    if [[ ! -f "$file_path" ]]; then
        local dir_path=$(dirname "$file_path")
        if [[ ! -d "$dir_path" ]]; then
            mkdir -p "$dir_path"
            echo "Created directory: $dir_path"
        fi
        
        # Create an empty file with a basic template for Hyprland configs
        if [[ "$file_path" == *"/configs/"* ]]; then
            echo "# $(basename "$file_path" .conf | tr '[:lower:]' '[:upper:]') Configuration" > "$file_path"
            echo "# Auto-generated by quick-edit script" >> "$file_path"
            echo "" >> "$file_path"
        else
            touch "$file_path"
        fi
        echo "Created file: $file_path"
    fi
}

# Function to convert hex color to ANSI RGB
hex_to_ansi() {
    local hex_color="$1"
    local fallback="$2"
    
    # Check if hex_color is valid (starts with # and has 6 hex digits)
    if [[ "$hex_color" =~ ^#[0-9a-fA-F]{6}$ ]]; then
        local r=$((16#${hex_color:1:2}))
        local g=$((16#${hex_color:3:2}))
        local b=$((16#${hex_color:5:2}))
        echo "\033[38;2;${r};${g};${b}m"
    else
        echo "$fallback"
    fi
}

# Create a temporary preview script
PREVIEW_SCRIPT=$(mktemp)
cat > "$PREVIEW_SCRIPT" << 'EOF'
#!/bin/bash
file_path="$1"

# Function to convert hex color to ANSI RGB
hex_to_ansi() {
    local hex_color="$1"
    local fallback="$2"
    
    # Check if hex_color is valid (starts with # and has 6 hex digits)
    if [[ "$hex_color" =~ ^#[0-9a-fA-F]{6}$ ]]; then
        local r=$((16#${hex_color:1:2}))
        local g=$((16#${hex_color:3:2}))
        local b=$((16#${hex_color:5:2}))
        echo "\033[38;2;${r};${g};${b}m"
    else
        echo "$fallback"
    fi
}

# Load pywal colors if available
COLORS_FILE="$HOME/.cache/wal/colors.json"
if [[ -f "$COLORS_FILE" ]] && command -v jq >/dev/null 2>&1; then
    COLOR1=$(jq -r '.colors.color1' "$COLORS_FILE" 2>/dev/null)
    COLOR2=$(jq -r '.colors.color2' "$COLORS_FILE" 2>/dev/null)
    COLOR3=$(jq -r '.colors.color3' "$COLORS_FILE" 2>/dev/null)
    COLOR4=$(jq -r '.colors.color4' "$COLORS_FILE" 2>/dev/null)
    COLOR7=$(jq -r '.colors.color7' "$COLORS_FILE" 2>/dev/null)
    COLOR13=$(jq -r '.colors.color13' "$COLORS_FILE" 2>/dev/null)
    
    # Validate colors (jq might return "null")
    [[ "$COLOR1" == "null" || ! "$COLOR1" =~ ^#[0-9a-fA-F]{6}$ ]] && COLOR1="#f38ba8"
    [[ "$COLOR2" == "null" || ! "$COLOR2" =~ ^#[0-9a-fA-F]{6}$ ]] && COLOR2="#a6e3a1"
    [[ "$COLOR3" == "null" || ! "$COLOR3" =~ ^#[0-9a-fA-F]{6}$ ]] && COLOR3="#fab387"
    [[ "$COLOR4" == "null" || ! "$COLOR4" =~ ^#[0-9a-fA-F]{6}$ ]] && COLOR4="#89b4fa"
    [[ "$COLOR7" == "null" || ! "$COLOR7" =~ ^#[0-9a-fA-F]{6}$ ]] && COLOR7="#a6adc8"
    [[ "$COLOR13" == "null" || ! "$COLOR13" =~ ^#[0-9a-fA-F]{6}$ ]] && COLOR13="#f5c2e7"
else
    # Fallback colors
    COLOR1="#f38ba8"
    COLOR2="#a6e3a1"
    COLOR3="#fab387"
    COLOR4="#89b4fa"
    COLOR7="#a6adc8"
    COLOR13="#f5c2e7"
fi

# ANSI color codes
reset="\033[0m"
bold="\033[1m"
dim="\033[2m"

# Convert hex to ANSI with fallbacks
title_color=$(hex_to_ansi "$COLOR4" "\033[94m")      # Blue
accent_color=$(hex_to_ansi "$COLOR13" "\033[95m")    # Magenta
success_color=$(hex_to_ansi "$COLOR2" "\033[92m")    # Green
warning_color=$(hex_to_ansi "$COLOR3" "\033[93m")    # Yellow
error_color=$(hex_to_ansi "$COLOR1" "\033[91m")      # Red
info_color=$(hex_to_ansi "$COLOR7" "\033[97m")       # White

echo -e "${title_color}${bold}📄 File Information${reset}\n"

if [[ -f "$file_path" ]]; then
    # File exists - show detailed info
    echo -e "${accent_color}📁 Path:${reset} ${info_color}$file_path${reset}"
    echo -e "${accent_color}📏 Size:${reset} ${info_color}$(du -h "$file_path" 2>/dev/null | cut -f1)${reset}"
    echo -e "${accent_color}📅 Modified:${reset} ${info_color}$(stat -c %y "$file_path" 2>/dev/null | cut -d'.' -f1)${reset}"
    echo -e "${accent_color}🔐 Permissions:${reset} ${info_color}$(stat -c %A "$file_path" 2>/dev/null)${reset}"
    
    line_count=$(wc -l < "$file_path" 2>/dev/null)
    echo -e "${accent_color}📊 Lines:${reset} ${info_color}$line_count${reset}"
    
    # File type detection
    file_type=$(file -b "$file_path" 2>/dev/null)
    echo -e "${accent_color}🏷️  Type:${reset} ${info_color}$file_type${reset}"
    
    # Show a preview of the file content
    if [[ $line_count -gt 0 ]]; then
        echo -e "\n${title_color}${bold}📝 Content Preview:${reset}"
        echo -e "${dim}────────────────────────────────────${reset}"
        head -n 10 "$file_path" 2>/dev/null | while IFS= read -r line; do
            echo -e "${info_color}$line${reset}"
        done
        if [[ $line_count -gt 10 ]]; then
            echo -e "${dim}... ($(($line_count - 10)) more lines)${reset}"
        fi
    fi
    
else
    # File doesn't exist
    echo -e "${warning_color}⚠️  File Status:${reset} ${error_color}Does not exist${reset}"
    echo -e "${accent_color}📁 Path:${reset} ${info_color}$file_path${reset}"
    echo -e "${accent_color}📂 Directory:${reset} ${info_color}$(dirname "$file_path")${reset}"
    
    if [[ -d "$(dirname "$file_path")" ]]; then
        echo -e "${success_color}✅ Directory exists${reset}"
    else
        echo -e "${warning_color}⚠️  Directory will be created${reset}"
    fi
    
    echo -e "\n${info_color}${dim}File will be created when selected${reset}"
    
    # Show template preview for Hyprland configs
    if [[ "$file_path" == *"/configs/"* ]]; then
        echo -e "\n${title_color}${bold}📝 Template Preview:${reset}"
        echo -e "${dim}────────────────────────────────────${reset}"
        echo -e "${info_color}# $(basename "$file_path" .conf | tr '[:lower:]' '[:upper:]') Configuration${reset}"
        echo -e "${info_color}# Auto-generated by quick-edit script${reset}"
        echo -e "${info_color}${reset}"
    fi
fi
EOF

chmod +x "$PREVIEW_SCRIPT"

# Cleanup function to remove temp script
cleanup() {
    rm -f "$PREVIEW_SCRIPT"
}
trap cleanup EXIT

# Define configs (emoji + name + path separated by a TAB)
configs=(
    $'🐚 Zsh Config\t'"$HOME/.zshrc"
    $'⚡ Neovim Config\t'"$HOME/.config/nvim/init.lua"
    $'🐱 Kitty Config\t'"$HOME/.config/kitty/kitty.conf"
    $'🟦 Waybar Config\t'"$HOME/.config/waybar/config.jsonc"
    $'🎨 Waybar Style\t'"$HOME/.config/waybar/style.css"
    $'🏠 Hyprland Main\t'"$HOME/.config/hypr/hyprland.conf"
    $'😴 Hypridle Config\t'"$HOME/.config/hypr/hypridle.conf"
    $'🔒 Hyprlock Config\t'"$HOME/.config/hypr/hyprlock.conf"
    $'🚀 Autostart\t'"$HOME/.config/hypr/configs/autostart.conf"
    $'⌨️ Keybinds\t'"$HOME/.config/hypr/configs/keybinds.conf"
    $'🌍 Environment\t'"$HOME/.config/hypr/configs/env.conf"
    $'⚙️ General\t'"$HOME/.config/hypr/configs/general.conf"
    $'✨ Look & Feel\t'"$HOME/.config/hypr/configs/look-and-feel.conf"
    $'📋 Rules\t'"$HOME/.config/hypr/configs/rules.conf"
    $'📦 Variables\t'"$HOME/.config/hypr/configs/variables.conf"
    $'🚀 Rofi Config\t'"$HOME/.config/rofi/config.rasi"
    $'🔌 Power Menu Config\t'"$HOME/.config/rofi/powermenu.rasi"
    $'📷 Screenshot Menu Config\t'"$HOME/.config/rofi/screenshot.rasi"
    $'🌐 Qutebrowser config\t'"$HOME/.config/qutebrowser/config.py"
    $'💬 Mako config\t'"$HOME/.config/wal/templates/mako"

)

# Use fzf to select with preview pane
selected=$(printf '%s\n' "${configs[@]}" | \
    fzf --delimiter=$'\t' \
        --with-nth=1 \
        --header='Select config to edit' \
        --height=100% \
        --border=rounded \
        --prompt='Config ❯ ' \
        --pointer='▶' \
        --marker='✓' \
        --info=inline \
        --layout=reverse \
        --preview="$PREVIEW_SCRIPT {2}" \
        --preview-window='right:45%:wrap' \
        --bind='tab:toggle-preview' \
        --bind='ctrl-/:toggle-preview' \
        --bind='?:toggle-preview' \
        $FZF_COLORS)

# Exit if no selection was made
[[ -z "$selected" ]] && exit 0

# Extract file path (2nd TAB field)
file_path=$(echo "$selected" | cut -f2)

# Create file if missing and open in editor
create_file_if_missing "$file_path"
hyprctl dispatch exec "kitty --class=floating-editor nvim '$file_path'"
hyprctl dispatch killactive
